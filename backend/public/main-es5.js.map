{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/confirm/confirm.component.ts","webpack:///src/app/confirm/confirm.component.html","webpack:///src/app/corona-sign/corona-sign.component.ts","webpack:///src/app/corona-sign/corona-sign.component.html","webpack:///src/app/corona-sign/data.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","ConfirmComponent","dialogRef","data","close","onClose","CoronaSignComponent","formBuilder","el","dataService","dialog","employees","names","selectedEmp","idNumber","isloading","signForm","group","fullName","required","minLength","employeeId","signature","getEmployees","subscribe","response","forEach","item","emp","firstName","lastName","push","filteredOptions","formControls","valueChanges","pipe","value","_filter","name","filter","setValue","filterValue","toLowerCase","option","includes","FormData","Object","key","append","addSignature","open","height","width","reset","controls","setSignature","onSign","DataService","http","get","backendEndpoint","post","responseType","providedIn","environment","production","bootstrapModule","err","console","error"],"mappings":";;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaC,Y,GALb;AAAA;;AAMI,WAAAC,KAAA,GAAQ,YAAR;AACH,K;;;uBAFYD,Y;AAAY,K;;;YAAZA,Y;AAAY,+B;AAAA,c;AAAA,a;AAAA,+B;AAAA;AAAA;ACPzB;;AACI;;AACJ;;;;;;;;;sEDKaA,Y,EAAY;cALxB,uDAKwB;eALd;AACPE,kBAAQ,EAAE,UADH;AAEPC,qBAAW,EAAE,sBAFN;AAGPC,mBAAS,EAAE,CAAC,sBAAD;AAHJ,S;AAKc,Q;;;;;;;;;;;;;;;;;;AEPzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAmCaC,S;;;;;YAAAA,S;AAAS,kBAFN,2DAEM;;;;yBAATA,S;AAAS,O;AAAA,iBAHP,E;AAAE,gBAbJ,CACL,uEADK,EAEL,4FAFK,EAGL,oEAHK,EAIL,sEAJK,EAKL,kEALK,EAML,+EANK,EAOL,wEAPK,EAQL,sEARK,EASL,qFATK,EAUL,6EAVK,EAWL,yEAXK,CAaI;;;;0HAGJA,S,EAAS;AAAA,uBAjBH,2DAiBG,EAjBW,sFAiBX,EAjBgC,4EAiBhC;AAjBgD,kBAE9D,uEAF8D,EAG9D,4FAH8D,EAI9D,oEAJ8D,EAK9D,sEAL8D,EAM9D,kEAN8D,EAO9D,+EAP8D,EAQ9D,wEAR8D,EAS9D,sEAT8D,EAU9D,qFAV8D,EAW9D,6EAX8D,EAY9D,yEAZ8D;AAiBhD,O;AALC,K;;;;;sEAKVA,S,EAAS;cAlBrB,sDAkBqB;eAlBZ;AACNC,sBAAY,EAAE,CAAC,2DAAD,EAAe,sFAAf,EAAoC,4EAApC,CADR;AAENC,iBAAO,EAAE,CACL,uEADK,EAEL,4FAFK,EAGL,oEAHK,EAIL,sEAJK,EAKL,kEALK,EAML,+EANK,EAOL,wEAPK,EAQL,sEARK,EASL,qFATK,EAUL,6EAVK,EAWL,yEAXK,CAFH;AAeNC,mBAAS,EAAE,EAfL;AAgBNC,mBAAS,EAAE,CAAC,2DAAD;AAhBL,S;AAkBY,Q;;;;;;;;;;;;;;;;;;ACnCtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAUaC,gB;AACT,gCACWC,SADX,EAEoCC,IAFpC,EAEoD;AAAA;;AADzC,aAAAD,SAAA,GAAAA,SAAA;AACyB,aAAAC,IAAA,GAAAA,IAAA;AAChC;;;;mCAEI,CAAW;;;kCAET;AACN,eAAKD,SAAL,CAAeE,KAAf;AACH;;;;;;;uBAVQH,gB,EAAgB,sI,EAAA,gEAGb,wEAHa,C;AAGE,K;;;YAHlBA,gB;AAAgB,kC;AAAA,c;AAAA,a;AAAA,kN;AAAA;AAAA;ACV7B;;AAAsB;AAAA,mBAAS,IAAAI,OAAA,EAAT;AAAkB,WAAlB;;AAAoB;;AAC1C;;AACI;;AACI;;AACJ;;AACA;;AACI;;AAAsD;AAAA,mBAAS,IAAAA,OAAA,EAAT;AAAkB,WAAlB;;AAAoB;;AAAK;;AACnF;;AACJ;;;;AALQ;;AAAA;;;;;;;;;sEDOKJ,gB,EAAgB;cAL5B,uDAK4B;eALlB;AACPR,kBAAQ,EAAE,aADH;AAEPC,qBAAW,EAAE,0BAFN;AAGPC,mBAAS,EAAE,CAAC,0BAAD;AAHJ,S;AAKkB,Q;;;;;;kBAGpB,oD;mBAAO,wE;;;;;;;;;;;;;;;;;;;;;AEbhB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACmC4B;;AAA8B;;AAAO;;;;;;AACrC;;AAA8B;;AAAM;;;;;;;;AAYhC;;AACY;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAER;;AACJ;;;;;;AAFyD;;AACrD;;AAAA;;;;QDrCvBW,mB;AAST,mCACYC,WADZ,EAEYC,EAFZ,EAGYC,WAHZ,EAIWC,MAJX,EAI4B;AAAA;;AAHhB,aAAAH,WAAA,GAAAA,WAAA;AACA,aAAAC,EAAA,GAAAA,EAAA;AACA,aAAAC,WAAA,GAAAA,WAAA;AACD,aAAAC,MAAA,GAAAA,MAAA;AAXX,aAAAC,SAAA,GAAY,EAAZ;AAEA,aAAAC,KAAA,GAAQ,EAAR;AAEA,aAAAC,WAAA,GAAc,EAAd;AACA,aAAAC,QAAA,GAAW,EAAX;AAOI;;;;mCAEI;AAAA;;AACJ,eAAKC,SAAL,GAAiB,IAAjB;AACA,eAAKC,QAAL,GAAgB,KAAKT,WAAL,CAAiBU,KAAjB,CAAuB;AACnCC,oBAAQ,EAAE,CAAC,IAAD,EAAO,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,CAAP,CADyB;AAEnCC,sBAAU,EAAE,CAAC,IAAD,EAAO,CAAC,0DAAWF,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,CAAP,CAFuB;AAGnCE,qBAAS,EAAE,CAAC,IAAD,EAAO,CAAC,0DAAWH,QAAZ,CAAP;AAHwB,WAAvB,CAAhB;AAKA,eAAKV,WAAL,CAAiBc,YAAjB,GAAgCC,SAAhC,CAA0C,UAACC,QAAD,EAAc;AACpDA,oBAAQ,CAACC,OAAT,CAAiB,UAACC,IAAD,EAAU;AACvB,kBAAMC,GAAG,GAAG;AACRV,wBAAQ,YAAKS,IAAI,CAACE,SAAV,cAAuBF,IAAI,CAACG,QAA5B,CADA;AAERhB,wBAAQ,EAAEa,IAAI,CAACb,QAFP;AAGRQ,yBAAS,EAAE;AAHH,eAAZ;;AAKA,mBAAI,CAACX,SAAL,CAAeoB,IAAf,CAAoBH,GAApB;;AACA,mBAAI,CAAChB,KAAL,CAAWmB,IAAX,CAAgBH,GAAG,CAACV,QAApB;AACH,aARD;AASA,iBAAI,CAACc,eAAL,GAAuB,KAAI,CAACC,YAAL,CAAkBf,QAAlB,CAA2BgB,YAA3B,CAAwCC,IAAxC,CACnB,iEAAU,EAAV,CADmB,EAEnB,2DAAI,UAACC,KAAD;AAAA,qBAAW,KAAI,CAACC,OAAL,CAAaD,KAAb,CAAX;AAAA,aAAJ,CAFmB,CAAvB;AAIA,iBAAI,CAACrB,SAAL,GAAiB,KAAjB;AACH,WAfD;AAgBH;;;oCAEWuB,I,EAAM;AACd,eAAKzB,WAAL,GAAmB,KAAKF,SAAL,CAAe4B,MAAf,CAAsB,UAACZ,IAAD,EAAU;AAC/C,mBAAOW,IAAI,eAAQX,IAAI,CAACT,QAAb,CAAX;AACH,WAFkB,CAAnB;AAGA,eAAKJ,QAAL,GAAgB,KAAKD,WAAL,CAAiB,CAAjB,EAAoBC,QAApC;AACA,eAAKmB,YAAL,CAAkBZ,UAAlB,CAA6BmB,QAA7B,CAAsC,KAAK1B,QAA3C;AACA,eAAKD,WAAL,GAAmB,KAAKA,WAAL,CAAiB,CAAjB,CAAnB;AACH;;;gCAEeuB,K,EAAa;AACzB,cAAMK,WAAW,GAAGL,KAAK,CAACM,WAAN,EAApB;AAEA,iBAAO,KAAK9B,KAAL,CAAW2B,MAAX,CAAkB,UAACI,MAAD;AAAA,mBACrBA,MAAM,CAACD,WAAP,GAAqBE,QAArB,CAA8BH,WAA9B,CADqB;AAAA,WAAlB,CAAP;AAGH;;;uCAEc;AACX,eAAK5B,WAAL,CAAiB,WAAjB,IAAgC,IAAhC;AACH;;;iCAEK;AAAA;;AACF,cAAMV,IAAI,GAAa,IAAI0C,QAAJ,EAAvB;AACAC,gBAAM,CAAC3D,IAAP,CAAY,KAAK0B,WAAjB,EAA8Ba,OAA9B,CAAsC,UAACqB,GAAD,EAAS;AAC3C5C,gBAAI,CAAC6C,MAAL,CAAYD,GAAZ,EAAiB,MAAI,CAAClC,WAAL,CAAiBkC,GAAjB,CAAjB;AACH,WAFD;AAIA,eAAKtC,WAAL,CACKwC,YADL,CACkB,KAAKpC,WADvB,EAEKW,SAFL,CAEe,UAACC,QAAD,EAAc;AACrB,kBAAI,CAACf,MAAL,CAAYwC,IAAZ,CAAiB,2EAAjB,EAAmC;AAC/BC,oBAAM,EAAE,OADuB;AAE/BC,mBAAK,EAAE,OAFwB;AAG/BjD,kBAAI,EAAE;AAHyB,aAAnC;;AAMA,kBAAI,CAACa,QAAL,CAAcqC,KAAd;AACH,WAVL;AAWH;;;4BAEkB;AACf,iBAAO,KAAKrC,QAAL,CAAcsC,QAArB;AACH;;;;;;;uBAnFQhD,mB,EAAmB,2H,EAAA,yH,EAAA,0H,EAAA,mI;AAAA,K;;;YAAnBA,mB;AAAmB,sC;AAAA,e;AAAA,a;AAAA,y7B;AAAA;AAAA;ACdhC;;AACI;;AACI;;AACJ;;AACA;;AACI;;AACI;;AAAG;;AAAiB;;AACxB;;AACA;;AACI;;AACI;;AACI;;AAEJ;;AACA;;AACI;;AACJ;;AACA;;AACI;;AACA;;AAAM;;AAAsE;;AAChF;;AACA;;AAAI;;AAAwE;;AAC5E;;AAAI;;AAAgE;;AACpE;;AAAI;;AAAqE;;AACrE;;AACJ;;AACA;;AAAI;;AAA6C;;AACjD;;AAAI;;AAA8D;;AACtE;;AACJ;;AACA;;AACI;;AACI;;AACI;;AACI;;AACI;;AACA;;AACA;;AASA;;AAEI;;;;AAKJ;;AACJ;;AAEJ;;AACA;;AACI;;AACI;;AAAW;;AAAU;;AACrB;;AAQJ;;AACJ;;AACJ;;AACA;;AACI;;AAEI;AAAA,mBAAS,IAAAiD,YAAA,EAAT;AAAuB,WAAvB;;AACuC;;AAAmD;;AAClG;;AACA;;AACI;;AAMI;AAAA,mBAAS,IAAAC,MAAA,EAAT;AAAiB,WAAjB;;AACA;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;;;;;AA5DkB;;AAAA;;AAIqB;;AAAA;;AACA;;AAAA;;AAQP;;AAAA;;AAMY;;AAAA;;AA+BpB;;AAAA,kHAA0C,UAA1C,EAA0C,mBAA1C;;;;;;;;;;sEDnEXlD,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACPb,kBAAQ,EAAE,iBADH;AAEPC,qBAAW,EAAE,8BAFN;AAGPC,mBAAS,EAAE,CAAC,8BAAD;AAHJ,S;AAKqB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEdhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQa8D,W;AACT,2BAAoBC,IAApB,EAAsC;AAAA;;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AAAoB;;;;uCAE5B;AACR,iBAAO,KAAKA,IAAL,CAAUC,GAAV,WAAiB,sEAAIC,eAArB,gBAAP;AACH;;;qCAEYzD,I,EAAI;AACb;AACA,iBAAO,KAAKuD,IAAL,CAAUG,IAAV,WAAkB,sEAAID,eAAtB,iBAAmDzD,IAAnD,EAAyD,EAAzD,CAAP;AACH;;;wCAEe;AACZ,iBAAO,KAAKuD,IAAL,CAAUC,GAAV,WAAiB,sEAAIC,eAArB,kBAAmD;AACtDE,wBAAY,EAAE;AADwC,WAAnD,CAAP;AAGH;;;;;;;uBAhBQL,W,EAAW,uH;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW,K;AAAA,kBAFR;;;;;sEAEHA,W,EAAW;cAHvB,wDAGuB;eAHZ;AACRM,oBAAU,EAAE;AADJ,S;AAGY,Q;;;;;;;;;;;;;;;;;;;;;;ACRxB;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;AACA;;;AAEO,QAAMC,WAAW,GAAG;AACvBC,gBAAU,EAAE,KADW;AAEvBL,qBAAe,EAAE;AAFM,KAApB;AAKP;;;;;;;AAOA;;;;;;;;;;;;;;;;;AChBA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAYK,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyBC,eAAzB,CAAyC,yDAAzC,WACS,UAAAC,GAAG;AAAA,aAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n    title = 'CoronaSign';\n}\n","<div class=\"app-wrap\">\n    <app-corona-sign></app-corona-sign>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { CoronaSignComponent } from './corona-sign/corona-sign.component';\nimport { MatCardModule } from '@angular/material/card';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatInputModule } from '@angular/material/input';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { ConfirmComponent } from './confirm/confirm.component';\nimport { MatDialogModule } from '@angular/material/dialog';\n\n@NgModule({\n    declarations: [AppComponent, CoronaSignComponent, ConfirmComponent],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        MatCardModule,\n        HttpClientModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatButtonModule,\n        MatInputModule,\n        MatAutocompleteModule,\n        MatCheckboxModule,\n        MatDialogModule,\n    ],\n    providers: [],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nexport interface DialogData {\n    data: string;\n}\n@Component({\n    selector: 'app-confirm',\n    templateUrl: './confirm.component.html',\n    styleUrls: ['./confirm.component.scss'],\n})\nexport class ConfirmComponent implements OnInit {\n    constructor(\n        public dialogRef: MatDialogRef<ConfirmComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: DialogData\n    ) {}\n\n    ngOnInit(): void {}\n\n    onClose() {\n        this.dialogRef.close();\n    }\n}\n","<div class=\"backdrop\" (click)=\"onClose()\"></div>\n<div class=\"confirm-box\">\n    <div class=\"confirm-message\">\n        {{ data }}\n    </div>\n    <div mat-dialog-actions class=\"confirm-box-actions\">\n        <button mat-raised-button color=\"warn\" class=\"button\" (click)=\"onClose()\">Close</button>\n    </div>\n</div>\n","import { Component, ElementRef, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { DataService } from './data.service';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ConfirmComponent } from '../confirm/confirm.component';\n\n@Component({\n    selector: 'app-corona-sign',\n    templateUrl: './corona-sign.component.html',\n    styleUrls: ['./corona-sign.component.scss'],\n})\nexport class CoronaSignComponent implements OnInit {\n    signForm: FormGroup;\n    employees = [];\n    isloading: boolean;\n    names = [];\n    filteredOptions: Observable<string[]>;\n    selectedEmp = {};\n    idNumber = '';\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private el: ElementRef,\n        private dataService: DataService,\n        public dialog: MatDialog\n    ) {}\n\n    ngOnInit(): void {\n        this.isloading = true;\n        this.signForm = this.formBuilder.group({\n            fullName: [null, [Validators.required, Validators.minLength(2)]],\n            employeeId: [null, [Validators.required, Validators.minLength(7)]],\n            signature: [null, [Validators.required]],\n        });\n        this.dataService.getEmployees().subscribe((response) => {\n            response.forEach((item) => {\n                const emp = {\n                    fullName: `${item.firstName} ${item.lastName}`,\n                    idNumber: item.idNumber,\n                    signature: false,\n                };\n                this.employees.push(emp);\n                this.names.push(emp.fullName);\n            });\n            this.filteredOptions = this.formControls.fullName.valueChanges.pipe(\n                startWith(''),\n                map((value) => this._filter(value))\n            );\n            this.isloading = false;\n        });\n    }\n\n    setIdNumber(name) {\n        this.selectedEmp = this.employees.filter((item) => {\n            return name === `${item.fullName}`;\n        });\n        this.idNumber = this.selectedEmp[0].idNumber;\n        this.formControls.employeeId.setValue(this.idNumber);\n        this.selectedEmp = this.selectedEmp[0];\n    }\n\n    private _filter(value: string): string[] {\n        const filterValue = value.toLowerCase();\n\n        return this.names.filter((option) =>\n            option.toLowerCase().includes(filterValue)\n        );\n    }\n\n    setSignature() {\n        this.selectedEmp['signature'] = true;\n    }\n\n    onSign(): void {\n        const data: FormData = new FormData();\n        Object.keys(this.selectedEmp).forEach((key) => {\n            data.append(key, this.selectedEmp[key]);\n        });\n\n        this.dataService\n            .addSignature(this.selectedEmp)\n            .subscribe((response) => {\n                this.dialog.open(ConfirmComponent, {\n                    height: '200px',\n                    width: '200px',\n                    data: 'תודה, יום טוב!',\n                });\n\n                this.signForm.reset();\n            });\n    }\n\n    get formControls() {\n        return this.signForm.controls;\n    }\n}\n","<div class=\"auth-page\">\n    <div class=\"panda-logo\">\n        <img class=\"panda-logo\" src=\"../../assets/images/panda-logo-1920.png\" alt=\"#\"/>\n    </div>\n    <mat-card class=\"form-container\">\n        <div class=\"form-title\">\n            <p>טופס הצהרת קורונה</p>\n        </div>\n        <div>\n            <ul>\n                <li>\n                    אני מצהיר/ה כי ערכתי היום בדיקה למדידת חום גוף, בה נמצא כי חום גופי אינו עולה על\n                    38 מעלות צלסיוס וכי לא היה לי חום כאמור בשבוע האחרון.\n                </li>\n                <li>\n                    אני מצהיר/ה כי לא הייתי במגע קרוב עם חולה קורונה בשבועיים האחרונים.\n                </li>\n                <li>\n                    אני מצהיר/ה כי אנני משתעל/ת וכן כי אין לי קשיים בנשימה.\n                    <span>(למעט שיעול או קושי בנשימה הנובע ממצב כרוני כגון אסטמה או אלרגיה אחרת)</span>\n                </li>\n                <li>אני מתחייב/ת לשמור מרחק של לפחות 2 מטרים ביני לבין אדם אחר במקום העבודה.</li>\n                <li>ידוע לי כי בעט שימוש במעלית, לא ישהו בה יותר מ2 נוסעים בו-זמנית.</li>\n                <li>אני מצהיר/ה כי הוקצע לי ציוד אישי קבוע ובכלל מקלדת, עכבר, טלפון קווי.<br>\n                    אני מתחייב/ת שלא לעשות שימוש בציוד אישי של עובד/ת אחר/ת\n                </li>\n                <li>אני מתחייב/ת לחבוש מסיכה במקום העבודה בכל עת.</li>\n                <li>אני מצהיר/ה כי לא הייתי במגע עם חולה קורונה בשבועיים האחרונים.</li>\n            </ul>\n        </div>\n        <div>\n            <form [formGroup]=\"signForm\">\n                <div class=\"inputs\">\n                    <div class=\"form-group\">\n                        <mat-form-field class=\"field-full-width\">\n                            <mat-label *ngIf=\"isloading\" >טוען...</mat-label>\n                            <mat-label *ngIf=\"!isloading\">שם מלא</mat-label>\n                            <input\n                                matInput\n                                type=\"text\"\n                                formControlName=\"fullName\"\n                                name=\"fullName\"\n                                placeholder=\"שם מלא\"\n                                autocomplete=\"off\"\n                                [matAutocomplete]=\"auto\"\n                            />\n                            <mat-autocomplete\n                                #auto=\"matAutocomplete\">\n                                <mat-option #selectedName\n                                            (click)=\"setIdNumber(selectedName.value)\"\n                                            *ngFor=\"let name of filteredOptions | async\" [value]=\"name\">\n                                    {{name}}\n                                </mat-option>\n                            </mat-autocomplete>\n                        </mat-form-field>\n\n                    </div>\n                    <div class=\"form-group\">\n                        <mat-form-field class=\"field-full-width\">\n                            <mat-label>תעודת זהות</mat-label>\n                            <input\n                                matInput\n                                type=\"text\"\n                                id=\"employeeId\"\n                                formControlName=\"employeeId\"\n                                name=\"employeeId\"\n                                placeholder=\"תעודת זהות\"\n                            />\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <mat-checkbox\n                        formControlName=\"signature\"\n                        (click)=\"setSignature()\"\n                        class=\"example-margin\" color=\"primary\">אני מאשר/ת כי קראתי ומתחייב לפעול לפי ההנחיות הנ''ל</mat-checkbox>\n                </div>\n                <div class=\"sign-buttons\">\n                    <button\n                        mat-raised-button\n                        class=\"sign-button\"\n                        [ngClass]=\"signForm.valid ? 'active' : ''\"\n                        [disabled]=\"!signForm.valid\"\n                        type=\"submit\"\n                        (click)=\"onSign()\">\n                        שלח\n                    </button>\n                </div>\n            </form>\n        </div>\n    </mat-card>\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment as env } from '../../environments/environment';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DataService {\n    constructor(private http: HttpClient) {}\n\n    getEmployees(): Observable<any> {\n        return this.http.get(`${env.backendEndpoint}/employees`);\n    }\n\n    addSignature(data): Observable<any> {\n        // console.log(data);\n        return this.http.post(`${env.backendEndpoint}/signature`, data, {});\n    }\n\n    getSignatures() {\n        return this.http.get(`${env.backendEndpoint}/signatures`, {\n            responseType: 'blob',\n        });\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false,\n    backendEndpoint: 'http://localhost:3000',\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}